<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32f10x_bb_bt.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32f10x_bb_bt.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Dec 05 22:55:23 2020
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bt_app_a2dp_stream_connect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">NMI_Handler</a><BR>
 <LI><a href="#[3e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">HardFault_Handler</a><BR>
 <LI><a href="#[3f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">MemManage_Handler</a><BR>
 <LI><a href="#[40]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">BusFault_Handler</a><BR>
 <LI><a href="#[41]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">UsageFault_Handler</a><BR>
 <LI><a href="#[42]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">SVC_Handler</a><BR>
 <LI><a href="#[43]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">DebugMon_Handler</a><BR>
 <LI><a href="#[44]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">PendSV_Handler</a><BR>
 <LI><a href="#[58]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[233]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d6]">parse_value</a><BR>
 <LI><a href="#[1cc]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cc]">cJSON_Delete</a><BR>
 <LI><a href="#[22e]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d6]">parse_value</a><BR>
 <LI><a href="#[240]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">print_value</a><BR>
 <LI><a href="#[23d]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23b]">print_value</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[58]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[4c]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">EXTI4_IRQHandler</a> from hw_exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8c]">Get_Max_Lun</a> from usb_prop.o(i.Get_Max_Lun) referenced from usb_prop.o(i.MASS_Data_Setup)
 <LI><a href="#[3e]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">MASS_Data_Setup</a> from usb_prop.o(i.MASS_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">MASS_GetConfigDescriptor</a> from usb_prop.o(i.MASS_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">MASS_GetDeviceDescriptor</a> from usb_prop.o(i.MASS_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">MASS_GetStringDescriptor</a> from usb_prop.o(i.MASS_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">MASS_Get_Interface_Setting</a> from usb_prop.o(i.MASS_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">MASS_NoData_Setup</a> from usb_prop.o(i.MASS_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">MASS_Reset</a> from usb_prop.o(i.MASS_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">MASS_Status_In</a> from usb_prop.o(i.MASS_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">MASS_Status_Out</a> from usb_prop.o(i.MASS_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">MASS_init</a> from usb_prop.o(i.MASS_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">Mass_Storage_ClearFeature</a> from usb_prop.o(i.Mass_Storage_ClearFeature) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">Mass_Storage_SetConfiguration</a> from usb_prop.o(i.Mass_Storage_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">Mass_Storage_SetDeviceAddress</a> from usb_prop.o(i.Mass_Storage_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3f]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 36 times from usb_istr.o(.data)
 <LI><a href="#[47]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[8b]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[89]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[45]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[48]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">USART1_IRQHandler</a> from hw_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">USART2_IRQHandler</a> from bt_phybusif_h4.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">USB_LP_CAN1_RX0_IRQHandler</a> from hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[86]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[87]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[85]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[8e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[90]">a2dp_sink_event_handle</a> from bt_a2dp_sink.o(i.a2dp_sink_event_handle) referenced from bt_a2dp_sink.o(i.a2dp_sink_init)
 <LI><a href="#[8f]">a2dp_sink_media_handle</a> from bt_a2dp_sink.o(i.a2dp_sink_media_handle) referenced from bt_a2dp_sink.o(i.a2dp_sink_init)
 <LI><a href="#[14]">a2dp_sink_signal_connect_realease</a> from bt_wrapper.o(i.a2dp_sink_signal_connect_realease) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[13]">a2dp_sink_signal_connect_set_up</a> from bt_wrapper.o(i.a2dp_sink_signal_connect_set_up) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[1a]">a2dp_sink_stream_abort</a> from bt_wrapper.o(i.a2dp_sink_stream_abort) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[16]">a2dp_sink_stream_connect_realease</a> from bt_wrapper.o(i.a2dp_sink_stream_connect_realease) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[15]">a2dp_sink_stream_connect_set_up</a> from bt_wrapper.o(i.a2dp_sink_stream_connect_set_up) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[18]">a2dp_sink_stream_realease</a> from bt_wrapper.o(i.a2dp_sink_stream_realease) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[17]">a2dp_sink_stream_start</a> from bt_wrapper.o(i.a2dp_sink_stream_start) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[19]">a2dp_sink_stream_suspend</a> from bt_wrapper.o(i.a2dp_sink_stream_suspend) referenced 2 times from bt_wrapper.o(.data)
 <LI><a href="#[95]">avdtp_connect_ind</a> from bt_avdtp.o(i.avdtp_connect_ind) referenced from bt_avdtp.o(i.avdtp_init)
 <LI><a href="#[94]">avdtp_media_input</a> from bt_avdtp.o(i.avdtp_media_input) referenced from bt_avdtp.o(i.avdtp_connect_ind)
 <LI><a href="#[91]">avdtp_signal_disconnect_ind</a> from bt_avdtp.o(i.avdtp_signal_disconnect_ind) referenced from bt_avdtp.o(i.avdtp_connect_ind)
 <LI><a href="#[92]">avdtp_signal_input</a> from bt_avdtp.o(i.avdtp_signal_input) referenced from bt_avdtp.o(i.avdtp_connect_ind)
 <LI><a href="#[93]">avdtp_stream_disconnect_ind</a> from bt_avdtp.o(i.avdtp_stream_disconnect_ind) referenced from bt_avdtp.o(i.avdtp_connect_ind)
 <LI><a href="#[38]">bt_app_a2dp_abort</a> from main.o(i.bt_app_a2dp_abort) referenced 2 times from main.o(.data)
 <LI><a href="#[36]">bt_app_a2dp_relase</a> from main.o(i.bt_app_a2dp_relase) referenced 2 times from main.o(.data)
 <LI><a href="#[31]">bt_app_a2dp_signal_connect</a> from main.o(i.bt_app_a2dp_signal_connect) referenced 2 times from main.o(.data)
 <LI><a href="#[32]">bt_app_a2dp_signal_disconnect</a> from main.o(i.bt_app_a2dp_signal_disconnect) referenced 2 times from main.o(.data)
 <LI><a href="#[35]">bt_app_a2dp_start</a> from main.o(i.bt_app_a2dp_start) referenced 2 times from main.o(.data)
 <LI><a href="#[33]">bt_app_a2dp_stream_connect</a> from main.o(i.bt_app_a2dp_stream_connect) referenced 2 times from main.o(.data)
 <LI><a href="#[34]">bt_app_a2dp_stream_disconnect</a> from main.o(i.bt_app_a2dp_stream_disconnect) referenced 2 times from main.o(.data)
 <LI><a href="#[37]">bt_app_a2dp_suspend</a> from main.o(i.bt_app_a2dp_suspend) referenced 2 times from main.o(.data)
 <LI><a href="#[29]">bt_app_hfp_batt_level_ind</a> from main.o(i.bt_app_hfp_batt_level_ind) referenced 2 times from main.o(.data)
 <LI><a href="#[2e]">bt_app_hfp_call_pn</a> from main.o(i.bt_app_hfp_call_pn) referenced 2 times from main.o(.data)
 <LI><a href="#[2c]">bt_app_hfp_call_setup</a> from main.o(i.bt_app_hfp_call_setup) referenced 2 times from main.o(.data)
 <LI><a href="#[2b]">bt_app_hfp_call_status</a> from main.o(i.bt_app_hfp_call_status) referenced 2 times from main.o(.data)
 <LI><a href="#[23]">bt_app_hfp_connect</a> from main.o(i.bt_app_hfp_connect) referenced 2 times from main.o(.data)
 <LI><a href="#[24]">bt_app_hfp_disconnect</a> from main.o(i.bt_app_hfp_disconnect) referenced 2 times from main.o(.data)
 <LI><a href="#[2d]">bt_app_hfp_local_pn</a> from main.o(i.bt_app_hfp_local_pn) referenced 2 times from main.o(.data)
 <LI><a href="#[2f]">bt_app_hfp_manu_id</a> from main.o(i.bt_app_hfp_manu_id) referenced 2 times from main.o(.data)
 <LI><a href="#[30]">bt_app_hfp_module_id</a> from main.o(i.bt_app_hfp_module_id) referenced 2 times from main.o(.data)
 <LI><a href="#[2a]">bt_app_hfp_operator</a> from main.o(i.bt_app_hfp_operator) referenced 2 times from main.o(.data)
 <LI><a href="#[28]">bt_app_hfp_roam_status_ind</a> from main.o(i.bt_app_hfp_roam_status_ind) referenced 2 times from main.o(.data)
 <LI><a href="#[25]">bt_app_hfp_sco_connect</a> from main.o(i.bt_app_hfp_sco_connect) referenced 2 times from main.o(.data)
 <LI><a href="#[26]">bt_app_hfp_sco_disconnect</a> from main.o(i.bt_app_hfp_sco_disconnect) referenced 2 times from main.o(.data)
 <LI><a href="#[27]">bt_app_hfp_signal_strength_ind</a> from main.o(i.bt_app_hfp_signal_strength_ind) referenced 2 times from main.o(.data)
 <LI><a href="#[1e]">bt_app_init_result</a> from main.o(i.bt_app_init_result) referenced 2 times from main.o(.data)
 <LI><a href="#[20]">bt_app_inquiry_result</a> from main.o(i.bt_app_inquiry_result) referenced 2 times from main.o(.data)
 <LI><a href="#[1f]">bt_app_inquiry_status</a> from main.o(i.bt_app_inquiry_status) referenced 2 times from main.o(.data)
 <LI><a href="#[22]">bt_app_le_inquiry_result</a> from main.o(i.bt_app_le_inquiry_result) referenced 2 times from main.o(.data)
 <LI><a href="#[21]">bt_app_le_inquiry_status</a> from main.o(i.bt_app_le_inquiry_status) referenced 2 times from main.o(.data)
 <LI><a href="#[39]">bt_app_spp_connect</a> from main.o(i.bt_app_spp_connect) referenced 2 times from main.o(.data)
 <LI><a href="#[3a]">bt_app_spp_disconnect</a> from main.o(i.bt_app_spp_disconnect) referenced 2 times from main.o(.data)
 <LI><a href="#[3b]">bt_app_spp_recv_data</a> from main.o(i.bt_app_spp_recv_data) referenced 2 times from main.o(.data)
 <LI><a href="#[9b]">bt_inquiry_complete</a> from bt_wrapper.o(i.bt_inquiry_complete) referenced from bt_wrapper.o(i.bt_start_inquiry)
 <LI><a href="#[9c]">bt_inquiry_result</a> from bt_wrapper.o(i.bt_inquiry_result) referenced from bt_wrapper.o(i.bt_start_inquiry)
 <LI><a href="#[96]">bt_le_inquiry_complete</a> from bt_wrapper.o(i.bt_le_inquiry_complete) referenced from bt_wrapper.o(i.bt_le_start_inquiry)
 <LI><a href="#[97]">bt_le_inquiry_result</a> from bt_wrapper.o(i.bt_le_inquiry_result) referenced from bt_wrapper.o(i.bt_le_start_inquiry)
 <LI><a href="#[9a]">bt_stack_worked</a> from bt_wrapper.o(i.bt_stack_worked) referenced from bt_wrapper.o(i.bt_start)
 <LI><a href="#[11]">csr8x11_vendor_deinit</a> from bt_vendor_csr8x11.o(i.csr8x11_vendor_deinit) referenced 2 times from bt_vendor_csr8x11.o(.data)
 <LI><a href="#[10]">csr8x11_vendor_init</a> from bt_vendor_csr8x11.o(i.csr8x11_vendor_init) referenced 2 times from bt_vendor_csr8x11.o(.data)
 <LI><a href="#[12]">csr8x11_vendor_set_baud_rate</a> from bt_vendor_csr8x11.o(i.csr8x11_vendor_set_baud_rate) referenced 2 times from bt_vendor_csr8x11.o(.data)
 <LI><a href="#[8d]">fputc</a> from hw_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1c]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[9e]">hci_reset_timeout</a> from bt_hci.o(i.hci_reset_timeout) referenced from bt_hci.o(i.hci_reset)
 <LI><a href="#[88]">isspace</a> from isspace_c.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[99]">link_key_not</a> from bt_wrapper.o(i.link_key_not) referenced from bt_wrapper.o(i.bt_start)
 <LI><a href="#[98]">link_key_req</a> from bt_wrapper.o(i.link_key_req) referenced from bt_wrapper.o(i.bt_start)
 <LI><a href="#[82]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1b]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[a4]">msbc_pack_frame</a> from sbc.o(i.msbc_pack_frame) referenced from sbc.o(i.sbc_set_defaults)
 <LI><a href="#[a5]">msbc_unpack_frame</a> from sbc.o(i.msbc_unpack_frame) referenced from sbc.o(i.sbc_set_defaults)
 <LI><a href="#[9d]">pin_req_handle</a> from bt_hci.o(i.pin_req_handle) referenced from bt_hci.o(i.hci_init)
 <LI><a href="#[1d]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[a3]">rfcomm_accept</a> from bt_rfcomm.o(i.rfcomm_accept) referenced from bt_rfcomm.o(i.rfcomm_init)
 <LI><a href="#[a2]">rfcomm_connect_ind</a> from bt_rfcomm.o(i.rfcomm_connect_ind) referenced from bt_rfcomm.o(i.rfcomm_init)
 <LI><a href="#[a0]">rfcomm_disconnect_ind</a> from bt_rfcomm.o(i.rfcomm_disconnect_ind) referenced from bt_rfcomm.o(i.rfcomm_connect_ind)
 <LI><a href="#[9f]">rfcomm_disconnected</a> from bt_rfcomm.o(i.rfcomm_disconnected) referenced from bt_rfcomm.o(i.rfcomm_accept)
 <LI><a href="#[a1]">rfcomm_input</a> from bt_rfcomm.o(i.rfcomm_input) referenced from bt_rfcomm.o(i.rfcomm_connect_ind)
 <LI><a href="#[a6]">sbc_pack_frame</a> from sbc.o(i.sbc_pack_frame) referenced from sbc.o(i.sbc_set_defaults)
 <LI><a href="#[a7]">sbc_unpack_frame</a> from sbc.o(i.sbc_unpack_frame) referenced from sbc.o(i.sbc_set_defaults)
 <LI><a href="#[aa]">sdp_connect_ind</a> from bt_sdp.o(i.sdp_connect_ind) referenced from bt_sdp.o(i.sdp_init)
 <LI><a href="#[a9]">sdp_disconnect_ind</a> from bt_sdp.o(i.sdp_disconnect_ind) referenced from bt_sdp.o(i.sdp_connect_ind)
 <LI><a href="#[a8]">sdp_recv</a> from bt_sdp.o(i.sdp_recv) referenced from bt_sdp.o(i.sdp_connect_ind)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ab]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[280]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[281]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[282]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[283]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[284]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[285]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_take
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_copy_partial
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_not
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_uuid16_to_uuid128
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_put
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[267]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_four
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_sep_new
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_new
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_finish
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_new
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utimer_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_allocate_packet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_connect
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_connect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_connect
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_connect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_req_handle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
</UL>

<P><STRONG><a name="[1c7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_vendor_get_chip_mrg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1a1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_free_packet
</UL>

<P><STRONG><a name="[243]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[236]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
</UL>

<P><STRONG><a name="[b3]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[c5]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[b9]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[28b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[85]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[28d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[ac]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[c8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[28f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[290]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>Bot_Abort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_bot.o(i.Bot_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bot_Abort &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_ClearFeature
</UL>

<P><STRONG><a name="[11d]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[ce]"></a>CBW_Decode</STRONG> (Thumb, 676 bytes, Stack size 8 bytes, usb_bot.o(i.CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[de]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[fd]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[fc]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[103]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[228]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dma_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_dma_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[226]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[123]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_dma_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[27a]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dma_enable
</UL>

<P><STRONG><a name="[0]"></a>EP1_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EP1_IN_Callback &rArr; Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP2_OUT_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EP2_OUT_Callback &rArr; Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; hw_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[205]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
</UL>

<P><STRONG><a name="[11f]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[204]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
</UL>

<P><STRONG><a name="[1ac]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_led_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_output
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_input
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reset_chip
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[20d]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
</UL>

<P><STRONG><a name="[ed]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_wait_ack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_write_byte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_start
</UL>

<P><STRONG><a name="[20e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_wait_ack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_write_byte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_start
</UL>

<P><STRONG><a name="[1ad]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_led_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_enable
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_reg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_manu_dev_id
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_erase_sector
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_page
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reset_chip
</UL>

<P><STRONG><a name="[e7]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[132]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[107]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>

<P><STRONG><a name="[e3]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[8c]"></a>Get_Max_Lun</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Get_Max_Lun))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.MASS_Data_Setup)
</UL>
<P><STRONG><a name="[f0]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[df]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[114]"></a>Leave_LowPowerMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[f4]"></a>MAL_GetStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mass_mal.o(i.MAL_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAL_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_get_sector_size
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_get_sector_count
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[f7]"></a>MAL_Read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mass_mal.o(i.MAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MAL_Read &rArr; hw_spi_flash_read &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[f9]"></a>MAL_Write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mass_mal.o(i.MAL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[7]"></a>MASS_Data_Setup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MASS_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>MASS_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>MASS_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MASS_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>MASS_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MASS_NoData_Setup</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_NoData_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MASS_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MASS_Reset</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MASS_Reset &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>MASS_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MASS_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>MASS_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MASS_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Mass_Storage_ClearFeature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_prop.o(i.Mass_Storage_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mass_Storage_ClearFeature &rArr; Bot_Abort &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>Mass_Storage_In</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[eb]"></a>Mass_Storage_Out</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[d]"></a>Mass_Storage_SetConfiguration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_prop.o(i.Mass_Storage_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Mass_Storage_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.Mass_Storage_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[17e]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[e1]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[e8]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[f3]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[105]"></a>PowerOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[222]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[11c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[12c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1ab]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_led_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reset_chip
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[12b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[12e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[11b]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[110]"></a>Read_Memory</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, memory.o(i.Read_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Read_Memory &rArr; MAL_Read &rArr; hw_spi_flash_read &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[112]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Resume &rArr; Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[113]"></a>Resume_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[115]"></a>SCSI_Address_Management</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usb_scsi.o(i.SCSI_Address_Management))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[dc]"></a>SCSI_Format_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Format_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Format_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d2]"></a>SCSI_Inquiry_Cmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Inquiry_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCSI_Inquiry_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[dd]"></a>SCSI_Invalid_Cmd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Invalid_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Invalid_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d5]"></a>SCSI_ModeSense10_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ModeSense10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ModeSense10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d4]"></a>SCSI_ModeSense6_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ModeSense6_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ModeSense6_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d9]"></a>SCSI_Read10_Cmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Read10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SCSI_Read10_Cmd &rArr; SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d7]"></a>SCSI_ReadCapacity10_Cmd</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadCapacity10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ReadCapacity10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d6]"></a>SCSI_ReadFormatCapacity_Cmd</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadFormatCapacity_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ReadFormatCapacity_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d1]"></a>SCSI_RequestSense_Cmd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_RequestSense_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCSI_RequestSense_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d3]"></a>SCSI_Start_Stop_Unit_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Start_Stop_Unit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Start_Stop_Unit_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[d8]"></a>SCSI_TestUnitReady_Cmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_TestUnitReady_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_TestUnitReady_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[db]"></a>SCSI_Verify10_Cmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Verify10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Verify10_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[da]"></a>SCSI_Write10_Cmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Write10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[24a]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
</UL>

<P><STRONG><a name="[24b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>

<P><STRONG><a name="[24d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>

<P><STRONG><a name="[24c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>

<P><STRONG><a name="[249]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
</UL>

<P><STRONG><a name="[fe]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[f2]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[100]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[101]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[cd]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[104]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[102]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[e5]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[cc]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[ff]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[d0]"></a>Set_CSW</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usb_bot.o(i.Set_CSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[cf]"></a>Set_Scsi_Sense_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.Set_Scsi_Sense_Data))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[11a]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[e0]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[10c]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[8a]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[fb]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetStringDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetDeviceDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetConfigDescriptor
</UL>

<P><STRONG><a name="[8b]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[89]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[10a]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[10b]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[10e]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[10d]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[11e]"></a>Suspend</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[45]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; utimer_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utimer_polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[208]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>

<P><STRONG><a name="[209]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>

<P><STRONG><a name="[207]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>

<P><STRONG><a name="[206]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>

<P><STRONG><a name="[116]"></a>Transfer_Data_Request</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usb_bot.o(i.Transfer_Data_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
</UL>

<P><STRONG><a name="[6b]"></a>USART1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hw_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = USART1_IRQHandler &rArr; shell_parse &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dma_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bt_phybusif_h4.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; ringbuffer_put
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_space_left
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_put
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_dma_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[225]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[12a]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[27b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bt_send
</UL>

<P><STRONG><a name="[121]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[12d]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>

<P><STRONG><a name="[122]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bt_send
</UL>

<P><STRONG><a name="[10f]"></a>USB_Cable_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[186]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[12f]"></a>USB_Interrupts_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[131]"></a>USB_Istr</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[108]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[111]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[e4]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[117]"></a>Write_Memory</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, memory.o(i.Write_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Write_Memory &rArr; MAL_Write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
</UL>

<P><STRONG><a name="[133]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[292]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ee]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_sep_new
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_new
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_stream_disconnect_ind
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_disconnect_ind
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_suspend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_set_configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_abort
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_disconnect_ind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_connect_ind
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_suspend_ind
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_start_ind
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_disconnect_ind
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_connect_ind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_close_ind
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_abort_ind
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_take
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_ref
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_copy_partial
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_cat
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_realloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_dechain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_worked
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_suspend
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_start
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_realease
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_connect_set_up
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_connect_realease
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_abort
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_signal_connect_set_up
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_signal_connect_realease
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_req
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_not
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_inquiry_result
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_free_packet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_allocate_packet
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_usage
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_disconnect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_connect
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_status
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_result
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_inquiry_status
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_init_result
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_signal_strength_ind
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_disconnect
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_connect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_roam_status_ind
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_operator
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_module_id
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_manu_id
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_local_pn
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_disconnect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_connect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_status
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_setup
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_pn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_batt_level_ind
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_suspend
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_disconnect
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_connect
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_signal_disconnect
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_signal_connect
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_relase
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_abort
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[294]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[135]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[295]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[189]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_connect
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_inquiry_result
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_init_result
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_signal_strength_ind
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_connect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_roam_status_ind
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_connect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_status
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_setup
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_batt_level_ind
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_connect
</UL>

<P><STRONG><a name="[296]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[297]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1c]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_finish
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[298]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[299]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[29a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ba]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[153]"></a>a2dp_sink_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_sink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = a2dp_sink_init &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_register_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_record_new
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_next_rhdl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_create_sep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[14]"></a>a2dp_sink_signal_connect_realease</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_signal_connect_realease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_signal_connect_realease &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>a2dp_sink_signal_connect_set_up</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_signal_connect_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_signal_connect_set_up &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>a2dp_sink_stream_abort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_abort &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>a2dp_sink_stream_connect_realease</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_connect_realease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_connect_realease &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>a2dp_sink_stream_connect_set_up</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_connect_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_connect_set_up &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>a2dp_sink_stream_realease</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_realease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_realease &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>a2dp_sink_stream_start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_start &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>a2dp_sink_stream_suspend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_wrapper.o(i.a2dp_sink_stream_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_sink_stream_suspend &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>avdtp_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_avdtp.o(i.avdtp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = avdtp_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_disconnect_ind
</UL>

<P><STRONG><a name="[158]"></a>avdtp_create_sep</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_avdtp.o(i.avdtp_create_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = avdtp_create_sep &rArr; avdtp_sep_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_sep_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_register_media_transport_category
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_register_media_codec_category
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_next_local_seid
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
</UL>

<P><STRONG><a name="[161]"></a>avdtp_get_active_pcb</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bt_avdtp.o(i.avdtp_get_active_pcb))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_media_input
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_stream_disconnect_ind
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_disconnect_ind
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_connect_ind
</UL>

<P><STRONG><a name="[14c]"></a>avdtp_get_spec_cap_value</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bt_avdtp.o(i.avdtp_get_spec_cap_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = avdtp_get_spec_cap_value
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
</UL>

<P><STRONG><a name="[157]"></a>avdtp_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bt_avdtp.o(i.avdtp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = avdtp_init &rArr; l2cap_register_connect_ind &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_connect_ind
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
</UL>

<P><STRONG><a name="[94]"></a>avdtp_media_input</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, bt_avdtp.o(i.avdtp_media_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = avdtp_media_input &rArr; bt_pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_be_read_32
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_be_read_16
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_active_pcb
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_avdtp.o(i.avdtp_connect_ind)
</UL>
<P><STRONG><a name="[162]"></a>avdtp_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bt_avdtp.o(i.avdtp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = avdtp_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_connect_ind
</UL>

<P><STRONG><a name="[149]"></a>avdtp_parse_media_codec_cap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_avdtp.o(i.avdtp_parse_media_codec_cap))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
</UL>

<P><STRONG><a name="[168]"></a>avdtp_register_media_codec_category</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_avdtp.o(i.avdtp_register_media_codec_category))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_create_sep
</UL>

<P><STRONG><a name="[167]"></a>avdtp_register_media_transport_category</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_avdtp.o(i.avdtp_register_media_transport_category))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_create_sep
</UL>

<P><STRONG><a name="[165]"></a>avdtp_sep_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bt_avdtp.o(i.avdtp_sep_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = avdtp_sep_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_create_sep
</UL>

<P><STRONG><a name="[92]"></a>avdtp_signal_input</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, bt_avdtp.o(i.avdtp_signal_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = avdtp_signal_input &rArr; avdtp_handle_set_configuration &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_active_pcb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_suspend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_set_configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_abort
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_avdtp.o(i.avdtp_connect_ind)
</UL>
<P><STRONG><a name="[1c9]"></a>bcm43430a1_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_vendor_bcm43430a1.o(i.bcm43430a1_instance))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_vendor_get_chip_mrg
</UL>

<P><STRONG><a name="[17c]"></a>board_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = board_init &rArr; file_system_init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_button_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_debug_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_systick_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_led_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utimer_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reset_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>bt_addr_dump</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, bt_common.o(i.bt_addr_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_suspend
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_start
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_realease
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_connect_set_up
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_connect_realease
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_stream_abort
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_signal_connect_set_up
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_signal_connect_realease
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_req
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_not
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_disconnect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_connect
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_signal_strength_ind
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_disconnect
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_connect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_roam_status_ind
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_operator
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_module_id
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_manu_id
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_local_pn
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_disconnect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_connect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_status
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_setup
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_pn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_batt_level_ind
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_suspend
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_disconnect
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_connect
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_signal_disconnect
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_signal_connect
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_relase
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_abort
</UL>

<P><STRONG><a name="[38]"></a>bt_app_a2dp_abort</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_abort &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>bt_app_a2dp_relase</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_relase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_relase &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>bt_app_a2dp_signal_connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_signal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_signal_connect &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>bt_app_a2dp_signal_disconnect</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main.o(i.bt_app_a2dp_signal_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_a2dp_signal_disconnect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>bt_app_a2dp_start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_start &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>bt_app_a2dp_stream_connect</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, main.o(i.bt_app_a2dp_stream_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_app_a2dp_stream_connect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>bt_app_a2dp_stream_disconnect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_stream_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_stream_disconnect &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>bt_app_a2dp_suspend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.bt_app_a2dp_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_app_a2dp_suspend &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>bt_app_hfp_batt_level_ind</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.bt_app_hfp_batt_level_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_hfp_batt_level_ind &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>bt_app_hfp_call_pn</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_call_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_call_pn &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>bt_app_hfp_call_setup</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.bt_app_hfp_call_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_hfp_call_setup &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>bt_app_hfp_call_status</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.bt_app_hfp_call_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_hfp_call_status &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>bt_app_hfp_connect</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, main.o(i.bt_app_hfp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_app_hfp_connect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>bt_app_hfp_disconnect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_disconnect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>bt_app_hfp_local_pn</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_local_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_local_pn &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>bt_app_hfp_manu_id</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_manu_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_manu_id &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>bt_app_hfp_module_id</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_module_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_module_id &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>bt_app_hfp_operator</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_operator))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_operator &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>bt_app_hfp_roam_status_ind</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.bt_app_hfp_roam_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_hfp_roam_status_ind &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>bt_app_hfp_sco_connect</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, main.o(i.bt_app_hfp_sco_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_app_hfp_sco_connect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>bt_app_hfp_sco_disconnect</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, main.o(i.bt_app_hfp_sco_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_hfp_sco_disconnect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>bt_app_hfp_signal_strength_ind</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.bt_app_hfp_signal_strength_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_hfp_signal_strength_ind &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>bt_app_init_result</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, main.o(i.bt_app_init_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_init_result &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>bt_app_inquiry_result</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(i.bt_app_inquiry_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_app_inquiry_result &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>bt_app_inquiry_status</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.bt_app_inquiry_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = bt_app_inquiry_status &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>bt_app_le_inquiry_result</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, main.o(i.bt_app_le_inquiry_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_app_le_inquiry_result &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_parse_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_has_more
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_data_parse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>bt_app_le_inquiry_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.bt_app_le_inquiry_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_app_le_inquiry_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>bt_app_spp_connect</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, main.o(i.bt_app_spp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_app_spp_connect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>bt_app_spp_disconnect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i.bt_app_spp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_app_spp_disconnect &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>bt_app_spp_recv_data</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, main.o(i.bt_app_spp_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_app_spp_recv_data &rArr; uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>bt_be_read_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_common.o(i.bt_be_read_16))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_media_input
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
</UL>

<P><STRONG><a name="[179]"></a>bt_be_read_32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bt_common.o(i.bt_be_read_32))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_media_input
</UL>

<P><STRONG><a name="[272]"></a>bt_be_store_16</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt_common.o(i.bt_be_store_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_be_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
</UL>

<P><STRONG><a name="[273]"></a>bt_be_store_32</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bt_common.o(i.bt_be_store_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_be_store_32
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_uuid16_to_uuid128
</UL>

<P><STRONG><a name="[238]"></a>bt_get_tx_buffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_phybusif_h4.o(i.bt_get_tx_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
</UL>

<P><STRONG><a name="[148]"></a>bt_hex_dump</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, bt_common.o(i.bt_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;did_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_not
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_result
</UL>

<P><STRONG><a name="[18d]"></a>bt_le_adv_data_parse</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bt_wrapper.o(i.bt_le_adv_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_le_adv_data_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_get_type
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_get_size
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_result
</UL>

<P><STRONG><a name="[18e]"></a>bt_le_adv_has_more</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_wrapper.o(i.bt_le_adv_has_more))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_result
</UL>

<P><STRONG><a name="[18c]"></a>bt_le_adv_parse_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_wrapper.o(i.bt_le_adv_parse_init))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_le_inquiry_result
</UL>

<P><STRONG><a name="[1df]"></a>bt_le_read_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_common.o(i.bt_le_read_16))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
</UL>

<P><STRONG><a name="[193]"></a>bt_le_set_adv_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_le_set_adv_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_le_set_adv_disable &rArr; hci_le_set_adv_enable &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[195]"></a>bt_le_set_adv_enable</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, bt_wrapper.o(i.bt_le_set_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_le_set_adv_enable &rArr; hci_le_set_adv_param &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[198]"></a>bt_le_start_inquiry</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_le_start_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_le_start_inquiry &rArr; hci_set_le_scan_param &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[19b]"></a>bt_le_stop_inquiry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_le_stop_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_le_stop_inquiry &rArr; hci_le_cancel_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cancel_inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1ff]"></a>bt_le_store_16</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt_common.o(i.bt_le_store_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_le_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
</UL>

<P><STRONG><a name="[1fe]"></a>bt_le_store_24</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bt_common.o(i.bt_le_store_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_le_store_24
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
</UL>

<P><STRONG><a name="[1a9]"></a>bt_mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_mem.o(i.bt_mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_realloc
</UL>

<P><STRONG><a name="[19d]"></a>bt_memory_allocate_packet</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, bt_memory.o(i.bt_memory_allocate_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_memory_allocate_packet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_check_and_merge
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_is_allocatable_packet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>bt_memory_check_and_merge</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, bt_memory.o(i.bt_memory_check_and_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_memory_check_and_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_free_packet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_allocate_packet
</UL>

<P><STRONG><a name="[1a0]"></a>bt_memory_free_packet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bt_memory.o(i.bt_memory_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_memory_free_packet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_check_and_merge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>bt_memory_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bt_memory.o(i.bt_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_memory_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>bt_memp_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bt_memp.o(i.bt_memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_close
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_close
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reset_all
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_connect_ind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_all
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_close
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_record_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_listen
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>

<P><STRONG><a name="[1b1]"></a>bt_memp_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bt_memp.o(i.bt_memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[13f]"></a>bt_memp_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bt_memp.o(i.bt_memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_sep_new
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_new
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_record_new
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_new
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_connect_ind
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_listen
</UL>

<P><STRONG><a name="[18f]"></a>bt_parse_cod</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bt_common.o(i.bt_parse_cod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_parse_cod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_inquiry_result
</UL>

<P><STRONG><a name="[16a]"></a>bt_pbuf_alloc</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, bt_pbuf.o(i.bt_pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_suspend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_set_configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_abort
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_negative_reply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_inquiry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cancel_inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_reset
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_pn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_issue_credits
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_ua
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>

<P><STRONG><a name="[16f]"></a>bt_pbuf_cat</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bt_pbuf.o(i.bt_pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
</UL>

<P><STRONG><a name="[1a3]"></a>bt_pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bt_pbuf.o(i.bt_pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_pbuf_chain &rArr; bt_pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_ref
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_issue_credits
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
</UL>

<P><STRONG><a name="[1a5]"></a>bt_pbuf_copy_partial</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bt_pbuf.o(i.bt_pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
</UL>

<P><STRONG><a name="[1a6]"></a>bt_pbuf_dechain</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bt_pbuf.o(i.bt_pbuf_dechain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_pbuf_dechain &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
</UL>

<P><STRONG><a name="[16c]"></a>bt_pbuf_free</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bt_pbuf.o(i.bt_pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_suspend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_set_configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_abort
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_dechain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_negative_reply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_inquiry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cancel_inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_pn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_issue_credits
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_ua
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>

<P><STRONG><a name="[17a]"></a>bt_pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bt_pbuf.o(i.bt_pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_pbuf_header &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_media_input
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[1a8]"></a>bt_pbuf_realloc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bt_pbuf.o(i.bt_pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_pbuf_realloc &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mem_trim
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[1a4]"></a>bt_pbuf_ref</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_pbuf.o(i.bt_pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_pbuf_ref &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
</UL>

<P><STRONG><a name="[1aa]"></a>bt_pbuf_take</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bt_pbuf.o(i.bt_pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
</UL>

<P><STRONG><a name="[188]"></a>bt_reset_chip</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.bt_reset_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_reset_chip &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9a]"></a>bt_stack_worked</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_stack_worked))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_stack_worked &rArr; hci_write_eir &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_ass_eir_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_start)
</UL>
<P><STRONG><a name="[1b0]"></a>bt_start</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_start &rArr; hci_reset &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;did_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_not
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_bt_working
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_reset
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1bd]"></a>bt_start_inquiry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bt_wrapper.o(i.bt_start_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_start_inquiry &rArr; hci_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1bf]"></a>bt_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_stop &rArr; rfcomm_reset_all &rArr; rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reset_all
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_all
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_all
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_reset_all
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1c4]"></a>bt_stop_inquiry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_stop_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_stop_inquiry &rArr; hci_cancel_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[1c6]"></a>bt_vendor_get_chip_mrg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bt_vendor_manager.o(i.bt_vendor_get_chip_mrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_vendor_get_chip_mrg &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcm43430a1_instance
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_instance
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_chip_name
</UL>

<P><STRONG><a name="[1ca]"></a>cJSON_AddStringToObject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(i.cJSON_AddStringToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cJSON_AddStringToObject &rArr; add_item_to_object &rArr; cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
</UL>

<P><STRONG><a name="[1cd]"></a>cJSON_CreateObject</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
</UL>

<P><STRONG><a name="[1cb]"></a>cJSON_CreateString</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[1cc]"></a>cJSON_Delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[1cf]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
</UL>

<P><STRONG><a name="[1d1]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
</UL>

<P><STRONG><a name="[1d2]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[1d7]"></a>cJSON_Print</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_json
</UL>

<P><STRONG><a name="[1c8]"></a>csr8x11_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_vendor_csr8x11.o(i.csr8x11_instance))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_vendor_get_chip_mrg
</UL>

<P><STRONG><a name="[11]"></a>csr8x11_vendor_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_vendor_csr8x11.o(i.csr8x11_vendor_deinit))
<BR>[Address Reference Count : 1]<UL><LI> bt_vendor_csr8x11.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>csr8x11_vendor_init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bt_vendor_csr8x11.o(i.csr8x11_vendor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = csr8x11_vendor_init &rArr; phybusif_reopen &rArr; phybusif_open &rArr; hw_uart_bt_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_read_16
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_reopen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_vendor_csr8x11.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>csr8x11_vendor_set_baud_rate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_vendor_csr8x11.o(i.csr8x11_vendor_set_baud_rate))
<BR>[Address Reference Count : 1]<UL><LI> bt_vendor_csr8x11.o(.data)
</UL>
<P><STRONG><a name="[1ba]"></a>did_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bt_did.o(i.did_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = did_init &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_register_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_record_new
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_next_rhdl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1e3]"></a>disk_initialize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_initialize &rArr; hw_spi_flash_init &rArr; protocol_spi1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_get_sector_size
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_manu_dev_id
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_get_size
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ec]"></a>disk_ioctl</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[1e7]"></a>disk_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_read &rArr; hw_spi_flash_read &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1f7]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e8]"></a>disk_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[1ea]"></a>f_mkfs</STRONG> (Thumb, 1664 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[1f2]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[1f5]"></a>fcs8_crc</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, bt_fcs.o(i.fcs8_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fcs8_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_check
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_calc
</UL>

<P><STRONG><a name="[1f4]"></a>fcs8_crc_calc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_fcs.o(i.fcs8_crc_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fcs8_crc_calc &rArr; fcs8_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_ua
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>

<P><STRONG><a name="[1f6]"></a>fcs8_crc_check</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, bt_fcs.o(i.fcs8_crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fcs8_crc_check &rArr; fcs8_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[187]"></a>file_system_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_wrapper.o(i.file_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = file_system_init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[8d]"></a>fputc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hw_uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1f1]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[1f9]"></a>hci_acl_write</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bt_hci.o(i.hci_acl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_dechain
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_link
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_write
</UL>

<P><STRONG><a name="[1b6]"></a>hci_bt_working</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_hci.o(i.hci_bt_working))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1c5]"></a>hci_cancel_inquiry</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bt_hci.o(i.hci_cancel_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_cancel_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop_inquiry
</UL>

<P><STRONG><a name="[1fb]"></a>hci_close</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bt_hci.o(i.hci_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_all
</UL>

<P><STRONG><a name="[1e0]"></a>hci_cmd_ass</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, bt_hci.o(i.hci_cmd_ass))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_negative_reply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_inquiry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cancel_inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
</UL>

<P><STRONG><a name="[1fa]"></a>hci_get_link</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bt_hci.o(i.hci_get_link))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
</UL>

<P><STRONG><a name="[1b3]"></a>hci_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bt_hci.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init &rArr; hci_set_chip_name &rArr; bt_vendor_get_chip_mrg &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_chip_name
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_req
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1be]"></a>hci_inquiry</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bt_hci.o(i.hci_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_store_24
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start_inquiry
</UL>

<P><STRONG><a name="[19c]"></a>hci_le_cancel_inquiry</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bt_hci.o(i.hci_le_cancel_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_cancel_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_stop_inquiry
</UL>

<P><STRONG><a name="[19a]"></a>hci_le_inquiry</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bt_hci.o(i.hci_le_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_inquiry &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_start_inquiry
</UL>

<P><STRONG><a name="[197]"></a>hci_le_set_adv_data</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bt_hci.o(i.hci_le_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_set_adv_data &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_enable
</UL>

<P><STRONG><a name="[194]"></a>hci_le_set_adv_enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bt_hci.o(i.hci_le_set_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_le_set_adv_enable &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_disable
</UL>

<P><STRONG><a name="[196]"></a>hci_le_set_adv_param</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bt_hci.o(i.hci_le_set_adv_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_set_adv_param &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_store_16
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_enable
</UL>

<P><STRONG><a name="[1b5]"></a>hci_link_key_not</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_hci.o(i.hci_link_key_not))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1b4]"></a>hci_link_key_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_hci.o(i.hci_link_key_req))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[200]"></a>hci_link_key_request_negative_reply</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_hci.o(i.hci_link_key_request_negative_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_link_key_request_negative_reply &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_req
</UL>

<P><STRONG><a name="[201]"></a>hci_link_key_request_reply</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bt_hci.o(i.hci_link_key_request_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_link_key_request_reply &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_key_req
</UL>

<P><STRONG><a name="[22a]"></a>hci_pdu_maxsize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_hci.o(i.hci_pdu_maxsize))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_write
</UL>

<P><STRONG><a name="[202]"></a>hci_pin_code_request_reply</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bt_hci.o(i.hci_pin_code_request_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_pin_code_request_reply &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_req_handle
</UL>

<P><STRONG><a name="[1fc]"></a>hci_pin_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_hci.o(i.hci_pin_req))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[1bc]"></a>hci_reset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_hci.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_reset &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utimer_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_timeout
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1c0]"></a>hci_reset_all</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bt_hci.o(i.hci_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_reset_all &rArr; hci_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
</UL>

<P><STRONG><a name="[9e]"></a>hci_reset_timeout</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_hci.o(i.hci_reset_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_reset_timeout &rArr; hci_reset &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_hci.o(i.hci_reset)
</UL>
<P><STRONG><a name="[1fd]"></a>hci_set_chip_name</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bt_hci.o(i.hci_set_chip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_set_chip_name &rArr; bt_vendor_get_chip_mrg &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_vendor_get_chip_mrg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[199]"></a>hci_set_le_scan_param</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bt_hci.o(i.hci_set_le_scan_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_set_le_scan_param &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_store_16
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_start_inquiry
</UL>

<P><STRONG><a name="[1af]"></a>hci_write_eir</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bt_hci.o(i.hci_write_eir))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_write_eir &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_ass
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_worked
</UL>

<P><STRONG><a name="[181]"></a>hw_button_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hw_button.o(i.hw_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hw_button_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[ec]"></a>hw_delay_ms</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hw_misc.o(i.hw_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hw_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_timer_reset_count
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reset_chip
</UL>

<P><STRONG><a name="[279]"></a>hw_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_misc.o(i.hw_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_write_byte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_start
</UL>

<P><STRONG><a name="[182]"></a>hw_led_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hw_led.o(i.hw_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[20b]"></a>hw_oled_clear</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hw_oled.o(i.hw_oled_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hw_oled_clear &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
</UL>

<P><STRONG><a name="[183]"></a>hw_oled_init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, hw_oled.o(i.hw_oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hw_oled_init &rArr; hw_oled_clear &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_clear
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[210]"></a>hw_oled_show_char</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hw_oled.o(i.hw_oled_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hw_oled_show_char &rArr; hw_oled_set_pos &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_show_string
</UL>

<P><STRONG><a name="[211]"></a>hw_oled_show_string</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hw_oled.o(i.hw_oled_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_oled_show_string &rArr; hw_oled_show_char &rArr; hw_oled_set_pos &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
</UL>

<P><STRONG><a name="[184]"></a>hw_sht2x_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hw_sht2x.o(i.hw_sht2x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hw_sht2x_init &rArr; hw_sht2x_sw_reset &rArr; sht2x_protocol_iic_write_byte &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[214]"></a>hw_sht2x_sw_reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_sht2x.o(i.hw_sht2x_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hw_sht2x_sw_reset &rArr; sht2x_protocol_iic_write_byte &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_write_byte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_init
</UL>

<P><STRONG><a name="[219]"></a>hw_spi_flash_erase_sector</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hw_spi_flash.o(i.hw_spi_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hw_spi_flash_erase_sector &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write
</UL>

<P><STRONG><a name="[1e6]"></a>hw_spi_flash_get_block_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_spi_flash.o(i.hw_spi_flash_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f6]"></a>hw_spi_flash_get_sector_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_spi_flash.o(i.hw_spi_flash_get_sector_count))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[f5]"></a>hw_spi_flash_get_sector_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_spi_flash.o(i.hw_spi_flash_get_sector_size))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1e5]"></a>hw_spi_flash_get_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_spi_flash.o(i.hw_spi_flash_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[185]"></a>hw_spi_flash_init</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, hw_spi_flash.o(i.hw_spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hw_spi_flash_init &rArr; protocol_spi1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_reg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_manu_dev_id
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f8]"></a>hw_spi_flash_read</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hw_spi_flash.o(i.hw_spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_spi_flash_read &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1e4]"></a>hw_spi_flash_read_manu_dev_id</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hw_spi_flash.o(i.hw_spi_flash_read_manu_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_spi_flash_read_manu_dev_id &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[21e]"></a>hw_spi_flash_read_reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hw_spi_flash.o(i.hw_spi_flash_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_wait_idle
</UL>

<P><STRONG><a name="[fa]"></a>hw_spi_flash_write</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, hw_spi_flash.o(i.hw_spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_erase_sector
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_nocheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[21a]"></a>hw_spi_flash_write_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_spi_flash.o(i.hw_spi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hw_spi_flash_write_enable &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_erase_sector
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_page
</UL>

<P><STRONG><a name="[180]"></a>hw_systick_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, hw_systick.o(i.hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hw_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[221]"></a>hw_uart_bt_init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, bt_phybusif_h4.o(i.hw_uart_bt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hw_uart_bt_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_open
</UL>

<P><STRONG><a name="[17f]"></a>hw_uart_debug_init</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, hw_uart.o(i.hw_uart_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = hw_uart_debug_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[25c]"></a>is_power_of_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ringbuffer.o(i.is_power_of_2))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_init
</UL>

<P><STRONG><a name="[17b]"></a>l2cap_close</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, bt_l2cap.o(i.l2cap_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cap_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_stream_disconnect_ind
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_disconnect_ind
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reset_all
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_disconnect_ind
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_disconnect_ind
</UL>

<P><STRONG><a name="[16b]"></a>l2cap_datawrite</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bt_l2cap.o(i.l2cap_datawrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_dechain
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_suspend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_set_configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_capabilities
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_get_all_capabilities
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_discovery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_handle_abort
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_issue_credits
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_ua
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>

<P><STRONG><a name="[1b7]"></a>l2cap_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_l2cap.o(i.l2cap_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reset_all
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[176]"></a>l2cap_new</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bt_l2cap.o(i.l2cap_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cap_new &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_init
</UL>

<P><STRONG><a name="[177]"></a>l2cap_register_connect_ind</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bt_l2cap.o(i.l2cap_register_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2cap_register_connect_ind &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_init
</UL>

<P><STRONG><a name="[163]"></a>l2cap_register_disconnect_ind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_l2cap.o(i.l2cap_register_disconnect_ind))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_connect_ind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_connect_ind
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect_ind
</UL>

<P><STRONG><a name="[164]"></a>l2cap_register_recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_l2cap.o(i.l2cap_register_recv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_connect_ind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_connect_ind
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect_ind
</UL>

<P><STRONG><a name="[1c1]"></a>l2cap_reset_all</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bt_l2cap.o(i.l2cap_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l2cap_reset_all &rArr; l2cap_close
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
</UL>

<P><STRONG><a name="[229]"></a>l2cap_write</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bt_l2cap.o(i.l2cap_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pdu_maxsize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
</UL>

<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; board_init &rArr; file_system_init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_free_packet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_allocate_packet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18b]"></a>operate_stauts_oled_show</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, main.o(i.operate_stauts_oled_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = operate_stauts_oled_show &rArr; hw_oled_show_string &rArr; hw_oled_show_char &rArr; hw_oled_set_pos &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_show_string
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_clear
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_init_result
</UL>

<P><STRONG><a name="[1b2]"></a>phybusif_open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_phybusif_h4.o(i.phybusif_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = phybusif_open &rArr; hw_uart_bt_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_bt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_reopen
</UL>

<P><STRONG><a name="[1e1]"></a>phybusif_output</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_phybusif_h4.o(i.phybusif_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = phybusif_output &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_copy_partial
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bt_send
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_tx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_eir
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_le_scan_param
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_negative_reply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_inquiry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cancel_inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_inquiry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cancel_inquiry
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_write
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
</UL>

<P><STRONG><a name="[1e2]"></a>phybusif_reopen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_phybusif_h4.o(i.phybusif_reopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = phybusif_reopen &rArr; phybusif_open &rArr; hw_uart_bt_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_open
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csr8x11_vendor_init
</UL>

<P><STRONG><a name="[1bb]"></a>phybusif_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_phybusif_h4.o(i.phybusif_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phybusif_reset &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[1d]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[24f]"></a>rfcomm_close</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, bt_rfcomm.o(i.rfcomm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_reset_all
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_lp_disconnected
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_disconnected
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[250]"></a>rfcomm_connect</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bt_rfcomm.o(i.rfcomm_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfcomm_connect &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_calc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_get_active_pcb
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
</UL>

<P><STRONG><a name="[24e]"></a>rfcomm_disc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_rfcomm.o(i.rfcomm_disc))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_accept
</UL>

<P><STRONG><a name="[9f]"></a>rfcomm_disconnected</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rfcomm_disconnected &rArr; rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.rfcomm_accept)
</UL>
<P><STRONG><a name="[251]"></a>rfcomm_get_active_pcb</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bt_rfcomm.o(i.rfcomm_get_active_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfcomm_get_active_pcb
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_pn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>

<P><STRONG><a name="[1b9]"></a>rfcomm_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bt_rfcomm.o(i.rfcomm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rfcomm_init &rArr; l2cap_register_connect_ind &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_connect_ind
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
</UL>

<P><STRONG><a name="[a1]"></a>rfcomm_input</STRONG> (Thumb, 1522 bytes, Stack size 64 bytes, bt_rfcomm.o(i.rfcomm_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rfcomm_input &rArr; rfcomm_process_msg &rArr; rfcomm_msc &rArr; rfcomm_uih &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_check
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_calc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_realloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_pn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_issue_credits
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_get_active_pcb
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_ua
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.rfcomm_connect_ind)
</UL>
<P><STRONG><a name="[25a]"></a>rfcomm_issue_credits</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_issue_credits))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rfcomm_issue_credits &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[255]"></a>rfcomm_listen</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rfcomm_listen &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_init
</UL>

<P><STRONG><a name="[253]"></a>rfcomm_lp_disconnected</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_lp_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rfcomm_lp_disconnected &rArr; rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_disconnect_ind
</UL>

<P><STRONG><a name="[258]"></a>rfcomm_msc</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bt_rfcomm.o(i.rfcomm_msc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rfcomm_msc &rArr; rfcomm_uih &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_get_active_pcb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[252]"></a>rfcomm_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bt_rfcomm.o(i.rfcomm_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfcomm_new &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>

<P><STRONG><a name="[257]"></a>rfcomm_pn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bt_rfcomm.o(i.rfcomm_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfcomm_pn &rArr; rfcomm_uih &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_get_active_pcb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[259]"></a>rfcomm_process_msg</STRONG> (Thumb, 1360 bytes, Stack size 72 bytes, bt_rfcomm.o(i.rfcomm_process_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rfcomm_process_msg &rArr; rfcomm_msc &rArr; rfcomm_uih &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_get_active_pcb
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_dm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_uih
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_new
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[1c3]"></a>rfcomm_reset_all</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rfcomm_reset_all &rArr; rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
</UL>

<P><STRONG><a name="[25b]"></a>rfcomm_uih</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, bt_rfcomm.o(i.rfcomm_uih))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfcomm_uih &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_take
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_dechain
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_pn
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_msc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[237]"></a>ringbuffer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ringbuffer.o(i.ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ringbuffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_open
</UL>

<P><STRONG><a name="[128]"></a>ringbuffer_put</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ringbuffer.o(i.ringbuffer_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ringbuffer_put
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[23a]"></a>ringbuffer_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ringbuffer.o(i.ringbuffer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_reopen
</UL>

<P><STRONG><a name="[127]"></a>ringbuffer_space_left</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ringbuffer.o(i.ringbuffer_space_left))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>sbc_decode</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, sbc.o(i.sbc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sbc_decode &rArr; sbc_synthesize_audio &rArr; sbc_synthesize_four
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_get_codesize
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_audio
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_media_handle
</UL>

<P><STRONG><a name="[144]"></a>sbc_finish</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sbc.o(i.sbc_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sbc_finish &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_close_ind
</UL>

<P><STRONG><a name="[260]"></a>sbc_get_codesize</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sbc.o(i.sbc_get_codesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sbc_get_codesize
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode
</UL>

<P><STRONG><a name="[152]"></a>sbc_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sbc.o(i.sbc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sbc_init &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_set_defaults
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_get_sbc_context_setting
</UL>

<P><STRONG><a name="[268]"></a>sdp_attribute_search</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, bt_sdp.o(i.sdp_attribute_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdp_attribute_search &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
</UL>

<P><STRONG><a name="[26a]"></a>sdp_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_sdp.o(i.sdp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_all
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_lp_disconnected
</UL>

<P><STRONG><a name="[1b8]"></a>sdp_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bt_sdp.o(i.sdp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdp_init &rArr; l2cap_register_connect_ind &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_connect_ind
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_all
</UL>

<P><STRONG><a name="[269]"></a>sdp_lp_disconnected</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bt_sdp.o(i.sdp_lp_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdp_lp_disconnected &rArr; sdp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_disconnect_ind
</UL>

<P><STRONG><a name="[154]"></a>sdp_next_rhdl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_sdp.o(i.sdp_next_rhdl))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;did_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
</UL>

<P><STRONG><a name="[26b]"></a>sdp_pattern_search</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, bt_sdp.o(i.sdp_pattern_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sdp_pattern_search &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_be_read_16
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_uuid16_to_uuid128
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
</UL>

<P><STRONG><a name="[26d]"></a>sdp_record_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_sdp.o(i.sdp_record_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdp_record_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_all
</UL>

<P><STRONG><a name="[155]"></a>sdp_record_new</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bt_sdp.o(i.sdp_record_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdp_record_new &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;did_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
</UL>

<P><STRONG><a name="[a8]"></a>sdp_recv</STRONG> (Thumb, 874 bytes, Stack size 48 bytes, bt_sdp.o(i.sdp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sdp_recv &rArr; sdp_service_search_rsp &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_search_attrib_rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_service_attrib_rsp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sdp.o(i.sdp_connect_ind)
</UL>
<P><STRONG><a name="[156]"></a>sdp_register_service</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_sdp.o(i.sdp_register_service))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;did_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_init
</UL>

<P><STRONG><a name="[1c2]"></a>sdp_reset_all</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bt_sdp.o(i.sdp_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdp_reset_all &rArr; sdp_init &rArr; l2cap_register_connect_ind &rArr; bt_memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_unregister_service
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_record_free
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
</UL>

<P><STRONG><a name="[26f]"></a>sdp_service_attrib_rsp</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, bt_sdp.o(i.sdp_service_attrib_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sdp_service_attrib_rsp &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
</UL>

<P><STRONG><a name="[270]"></a>sdp_service_search_attrib_rsp</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, bt_sdp.o(i.sdp_service_search_attrib_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sdp_service_search_attrib_rsp &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_be_store_16
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_attribute_search
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
</UL>

<P><STRONG><a name="[26e]"></a>sdp_service_search_rsp</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, bt_sdp.o(i.sdp_service_search_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sdp_service_search_rsp &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_chain
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_recv
</UL>

<P><STRONG><a name="[271]"></a>sdp_unregister_service</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bt_sdp.o(i.sdp_unregister_service))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_all
</UL>

<P><STRONG><a name="[274]"></a>shell_at_cmd_parse</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, main.o(i.shell_at_cmd_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = shell_at_cmd_parse &rArr; bt_le_set_adv_enable &rArr; hci_le_set_adv_param &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop_inquiry
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start_inquiry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_stop_inquiry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_start_inquiry
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_set_adv_disable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_usage
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
</UL>

<P><STRONG><a name="[276]"></a>shell_json_parse</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, main.o(i.shell_json_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = shell_json_parse &rArr; operate_stauts_oled_show &rArr; hw_oled_show_string &rArr; hw_oled_show_char &rArr; hw_oled_set_pos &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop_inquiry
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stop
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start_inquiry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_stauts_oled_show
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_parse
</UL>

<P><STRONG><a name="[124]"></a>shell_parse</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, main.o(i.shell_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = shell_parse &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_json_parse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[275]"></a>show_usage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.show_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_usage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_at_cmd_parse
</UL>

<P><STRONG><a name="[231]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[126]"></a>uart1_dma_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_uart.o(i.uart1_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_dma_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>uart2_dma_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bt_phybusif_h4.o(i.uart2_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart2_dma_enable &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>uart_bt_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bt_phybusif_h4.o(i.uart_bt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_bt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phybusif_output
</UL>

<P><STRONG><a name="[18a]"></a>uart_send_json</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, main.o(i.uart_send_json))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = uart_send_json &rArr; cJSON_Print &rArr; print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_recv_data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_disconnect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_spp_connect
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_inquiry_status
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_inquiry_result
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_init_result
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_signal_strength_ind
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_disconnect
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_sco_connect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_roam_status_ind
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_operator
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_module_id
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_manu_id
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_local_pn
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_disconnect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_connect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_status
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_setup
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_call_pn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_hfp_batt_level_ind
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_stream_connect
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_a2dp_signal_disconnect
</UL>

<P><STRONG><a name="[203]"></a>utimer_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bt_timer.o(i.utimer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = utimer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_idle_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[17d]"></a>utimer_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_timer.o(i.utimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[120]"></a>utimer_polling</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bt_timer.o(i.utimer_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utimer_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[118]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[119]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[e2]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[e6]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[e9]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[109]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[20a]"></a>hw_timer_reset_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_misc.o(i.hw_timer_reset_count))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_ms
</UL>

<P><STRONG><a name="[20f]"></a>hw_oled_set_pos</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_oled.o(i.hw_oled_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hw_oled_set_pos &rArr; hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_show_char
</UL>

<P><STRONG><a name="[20c]"></a>hw_oled_write_byte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hw_oled.o(i.hw_oled_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hw_oled_write_byte &rArr; protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_show_char
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_clear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_set_pos
</UL>

<P><STRONG><a name="[244]"></a>protocol_iic_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_oled.o(i.protocol_iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_iic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_cmd
</UL>

<P><STRONG><a name="[246]"></a>protocol_iic_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_oled.o(i.protocol_iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_cmd
</UL>

<P><STRONG><a name="[247]"></a>protocol_iic_wait_ack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_oled.o(i.protocol_iic_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_iic_wait_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_cmd
</UL>

<P><STRONG><a name="[248]"></a>protocol_iic_write_byte</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hw_oled.o(i.protocol_iic_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_cmd
</UL>

<P><STRONG><a name="[212]"></a>protocol_iic_write_cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_oled.o(i.protocol_iic_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_iic_write_cmd &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_wait_ack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
</UL>

<P><STRONG><a name="[213]"></a>protocol_iic_write_data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_oled.o(i.protocol_iic_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_iic_write_data &rArr; protocol_iic_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_write_byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_wait_ack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_stop
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_iic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_oled_write_byte
</UL>

<P><STRONG><a name="[f1]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[21b]"></a>hw_spi_flash_wait_idle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_spi_flash.o(i.hw_spi_flash_wait_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_erase_sector
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_page
</UL>

<P><STRONG><a name="[21f]"></a>hw_spi_flash_write_nocheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hw_spi_flash.o(i.hw_spi_flash_write_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write
</UL>

<P><STRONG><a name="[220]"></a>hw_spi_flash_write_page</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hw_spi_flash.o(i.hw_spi_flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_nocheck
</UL>

<P><STRONG><a name="[21d]"></a>protocol_spi1_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hw_spi_flash.o(i.protocol_spi1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = protocol_spi1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
</UL>

<P><STRONG><a name="[21c]"></a>protocol_spi1_read_write_byte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hw_spi_flash.o(i.protocol_spi1_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_enable
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_reg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_read_manu_dev_id
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_erase_sector
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_spi1_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spi_flash_write_page
</UL>

<P><STRONG><a name="[277]"></a>sht2x_protocol_iic_sda_input</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_sht2x.o(i.sht2x_protocol_iic_sda_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sht2x_protocol_iic_sda_input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
</UL>

<P><STRONG><a name="[278]"></a>sht2x_protocol_iic_sda_output</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_sht2x.o(i.sht2x_protocol_iic_sda_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_write_byte
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_start
</UL>

<P><STRONG><a name="[215]"></a>sht2x_protocol_iic_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hw_sht2x.o(i.sht2x_protocol_iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sht2x_protocol_iic_start &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_us
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_output
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_sw_reset
</UL>

<P><STRONG><a name="[218]"></a>sht2x_protocol_iic_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hw_sht2x.o(i.sht2x_protocol_iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sht2x_protocol_iic_stop &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_us
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_output
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_sw_reset
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_wait_ack
</UL>

<P><STRONG><a name="[217]"></a>sht2x_protocol_iic_wait_ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hw_sht2x.o(i.sht2x_protocol_iic_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sht2x_protocol_iic_wait_ack &rArr; sht2x_protocol_iic_stop &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_us
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_stop
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_input
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_sw_reset
</UL>

<P><STRONG><a name="[216]"></a>sht2x_protocol_iic_write_byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hw_sht2x.o(i.sht2x_protocol_iic_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sht2x_protocol_iic_write_byte &rArr; sht2x_protocol_iic_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay_us
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht2x_protocol_iic_sda_output
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_sht2x_sw_reset
</UL>

<P><STRONG><a name="[9d]"></a>pin_req_handle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_hci.o(i.pin_req_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pin_req_handle &rArr; hci_pin_code_request_reply &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pin_code_request_reply
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_hci.o(i.hci_init)
</UL>
<P><STRONG><a name="[1a7]"></a>pbuf_header_impl</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bt_pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_header
</UL>

<P><STRONG><a name="[27e]"></a>find_idle_timer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bt_timer.o(i.find_idle_timer))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utimer_create
</UL>

<P><STRONG><a name="[13c]"></a>a2dp_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_a2dp_sink.o(i.a2dp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a2dp_close
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_disconnect_ind
</UL>

<P><STRONG><a name="[142]"></a>a2dp_get_active_pcb</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bt_a2dp_sink.o(i.a2dp_get_active_pcb))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_disconnect_ind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_connect_ind
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_suspend_ind
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_start_ind
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_disconnect_ind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_close_ind
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_abort_ind
</UL>

<P><STRONG><a name="[13e]"></a>a2dp_new</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memp_malloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_connect_ind
</UL>

<P><STRONG><a name="[141]"></a>a2dp_signal_abort_ind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_abort_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_signal_abort_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[143]"></a>a2dp_signal_close_ind</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_close_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_signal_close_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_finish
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[145]"></a>a2dp_signal_connect_ind</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a2dp_signal_connect_ind &rArr; a2dp_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_new
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[146]"></a>a2dp_signal_disconnect_ind</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_signal_disconnect_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[147]"></a>a2dp_signal_open_ind</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bt_a2dp_sink.o(i.a2dp_signal_open_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = a2dp_signal_open_ind &rArr; a2dp_sink_get_sbc_context_setting &rArr; sbc_init &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_parse_media_codec_cap
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_get_sbc_context_setting
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[14b]"></a>a2dp_signal_set_config_ind</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bt_a2dp_sink.o(i.a2dp_signal_set_config_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a2dp_signal_set_config_ind &rArr; bt_hex_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_spec_cap_value
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[14e]"></a>a2dp_signal_start_ind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_start_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_signal_start_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[14f]"></a>a2dp_signal_suspend_ind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_signal_suspend_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_signal_suspend_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[90]"></a>a2dp_sink_event_handle</STRONG> (Thumb, 1276 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_sink_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = a2dp_sink_event_handle &rArr; a2dp_signal_open_ind &rArr; a2dp_sink_get_sbc_context_setting &rArr; sbc_init &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_disconnect_ind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_stream_connect_ind
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_suspend_ind
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_start_ind
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_set_config_ind
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_disconnect_ind
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_connect_ind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_close_ind
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_abort_ind
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_a2dp_sink.o(i.a2dp_sink_init)
</UL>
<P><STRONG><a name="[14a]"></a>a2dp_sink_get_sbc_context_setting</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, bt_a2dp_sink.o(i.a2dp_sink_get_sbc_context_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a2dp_sink_get_sbc_context_setting &rArr; sbc_init &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_signal_open_ind
</UL>

<P><STRONG><a name="[8f]"></a>a2dp_sink_media_handle</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bt_a2dp_sink.o(i.a2dp_sink_media_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = a2dp_sink_media_handle &rArr; sbc_decode &rArr; sbc_synthesize_audio &rArr; sbc_synthesize_four
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_a2dp_sink.o(i.a2dp_sink_init)
</UL>
<P><STRONG><a name="[150]"></a>a2dp_stream_connect_ind</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_stream_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_stream_connect_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[151]"></a>a2dp_stream_disconnect_ind</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bt_a2dp_sink.o(i.a2dp_stream_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a2dp_stream_disconnect_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_get_active_pcb
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2dp_sink_event_handle
</UL>

<P><STRONG><a name="[95]"></a>avdtp_connect_ind</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bt_avdtp.o(i.avdtp_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = avdtp_connect_ind &rArr; avdtp_new &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_new
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_active_pcb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_recv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_disconnect_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_avdtp.o(i.avdtp_init)
</UL>
<P><STRONG><a name="[166]"></a>avdtp_get_next_local_seid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_avdtp.o(i.avdtp_get_next_local_seid))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_create_sep
</UL>

<P><STRONG><a name="[169]"></a>avdtp_handle_abort</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_abort &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[16d]"></a>avdtp_handle_close</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_close &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[16e]"></a>avdtp_handle_discovery</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_discovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_discovery &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_cat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[170]"></a>avdtp_handle_get_all_capabilities</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_get_all_capabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_get_all_capabilities &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_cat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[171]"></a>avdtp_handle_get_capabilities</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, bt_avdtp.o(i.avdtp_handle_get_capabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = avdtp_handle_get_capabilities &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_cat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[172]"></a>avdtp_handle_open</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_open &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[173]"></a>avdtp_handle_set_configuration</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, bt_avdtp.o(i.avdtp_handle_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = avdtp_handle_set_configuration &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[174]"></a>avdtp_handle_start</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_start &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[175]"></a>avdtp_handle_suspend</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_avdtp.o(i.avdtp_handle_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = avdtp_handle_suspend &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_signal_input
</UL>

<P><STRONG><a name="[91]"></a>avdtp_signal_disconnect_ind</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bt_avdtp.o(i.avdtp_signal_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avdtp_signal_disconnect_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_active_pcb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_close
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_avdtp.o(i.avdtp_connect_ind)
</UL>
<P><STRONG><a name="[93]"></a>avdtp_stream_disconnect_ind</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bt_avdtp.o(i.avdtp_stream_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avdtp_stream_disconnect_ind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avdtp_get_active_pcb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_avdtp.o(i.avdtp_connect_ind)
</UL>
<P><STRONG><a name="[a3]"></a>rfcomm_accept</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_rfcomm.o(i.rfcomm_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfcomm_accept
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_disc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.rfcomm_init)
</UL>
<P><STRONG><a name="[a2]"></a>rfcomm_connect_ind</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_rfcomm.o(i.rfcomm_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfcomm_connect_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_recv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_disconnect_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.rfcomm_init)
</UL>
<P><STRONG><a name="[a0]"></a>rfcomm_disconnect_ind</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bt_rfcomm.o(i.rfcomm_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rfcomm_disconnect_ind &rArr; rfcomm_lp_disconnected &rArr; rfcomm_close &rArr; bt_pbuf_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_lp_disconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.rfcomm_connect_ind)
</UL>
<P><STRONG><a name="[254]"></a>rfcomm_dm</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_dm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rfcomm_dm &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_calc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_process_msg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[256]"></a>rfcomm_ua</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_rfcomm.o(i.rfcomm_ua))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rfcomm_ua &rArr; l2cap_datawrite &rArr; l2cap_write &rArr; hci_acl_write &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcs8_crc_calc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_datawrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_input
</UL>

<P><STRONG><a name="[aa]"></a>sdp_connect_ind</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_sdp.o(i.sdp_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdp_connect_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_recv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_disconnect_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sdp.o(i.sdp_init)
</UL>
<P><STRONG><a name="[a9]"></a>sdp_disconnect_ind</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bt_sdp.o(i.sdp_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdp_disconnect_ind &rArr; sdp_lp_disconnected &rArr; sdp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_lp_disconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sdp.o(i.sdp_connect_ind)
</UL>
<P><STRONG><a name="[26c]"></a>sdp_uuid16_to_uuid128</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_sdp.o(i.sdp_uuid16_to_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdp_uuid16_to_uuid128 &rArr; bt_be_store_32
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_be_store_32
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_pattern_search
</UL>

<P><STRONG><a name="[1ae]"></a>bt_ass_eir_data</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, bt_wrapper.o(i.bt_ass_eir_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_ass_eir_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_worked
</UL>

<P><STRONG><a name="[9b]"></a>bt_inquiry_complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bt_wrapper.o(i.bt_inquiry_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_inquiry_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_start_inquiry)
</UL>
<P><STRONG><a name="[9c]"></a>bt_inquiry_result</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, bt_wrapper.o(i.bt_inquiry_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_inquiry_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_parse_cod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_start_inquiry)
</UL>
<P><STRONG><a name="[192]"></a>bt_le_adv_get_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_wrapper.o(i.bt_le_adv_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_data_parse
</UL>

<P><STRONG><a name="[190]"></a>bt_le_adv_get_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt_wrapper.o(i.bt_le_adv_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_data_parse
</UL>

<P><STRONG><a name="[191]"></a>bt_le_adv_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_wrapper.o(i.bt_le_adv_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_data_parse
</UL>

<P><STRONG><a name="[96]"></a>bt_le_inquiry_complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bt_wrapper.o(i.bt_le_inquiry_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_le_inquiry_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_le_start_inquiry)
</UL>
<P><STRONG><a name="[97]"></a>bt_le_inquiry_result</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bt_wrapper.o(i.bt_le_inquiry_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_le_inquiry_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_le_start_inquiry)
</UL>
<P><STRONG><a name="[99]"></a>link_key_not</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bt_wrapper.o(i.link_key_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = link_key_not &rArr; bt_addr_dump &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_dump
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_start)
</UL>
<P><STRONG><a name="[98]"></a>link_key_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bt_wrapper.o(i.link_key_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = link_key_req &rArr; hci_link_key_request_reply &rArr; bt_pbuf_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_addr_dump
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_link_key_request_negative_reply
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_wrapper.o(i.bt_start)
</UL>
<P><STRONG><a name="[a4]"></a>msbc_pack_frame</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, sbc.o(i.msbc_pack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = msbc_pack_frame &rArr; sbc_pack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_pack_frame_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbc.o(i.sbc_set_defaults)
</UL>
<P><STRONG><a name="[a5]"></a>msbc_unpack_frame</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sbc.o(i.msbc_unpack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = msbc_unpack_frame &rArr; sbc_unpack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbc.o(i.sbc_set_defaults)
</UL>
<P><STRONG><a name="[25d]"></a>sbc_calculate_bits</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sbc.o(i.sbc_calculate_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_calculate_bits_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_pack_frame_internal
</UL>

<P><STRONG><a name="[25e]"></a>sbc_calculate_bits_internal</STRONG> (Thumb, 1358 bytes, Stack size 100 bytes, sbc.o(i.sbc_calculate_bits_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sbc_calculate_bits_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_calculate_bits
</UL>

<P><STRONG><a name="[266]"></a>sbc_clip16</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sbc.o(i.sbc_clip16))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_four
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_eight
</UL>

<P><STRONG><a name="[263]"></a>sbc_crc8</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sbc.o(i.sbc_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sbc_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_pack_frame_internal
</UL>

<P><STRONG><a name="[25f]"></a>sbc_decoder_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sbc.o(i.sbc_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sbc_decoder_init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode
</UL>

<P><STRONG><a name="[a6]"></a>sbc_pack_frame</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, sbc.o(i.sbc_pack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sbc_pack_frame &rArr; sbc_pack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_pack_frame_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbc.o(i.sbc_set_defaults)
</UL>
<P><STRONG><a name="[22c]"></a>sbc_pack_frame_internal</STRONG> (Thumb, 614 bytes, Stack size 264 bytes, sbc.o(i.sbc_pack_frame_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = sbc_pack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_crc8
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_calculate_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_pack_frame
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_pack_frame
</UL>

<P><STRONG><a name="[262]"></a>sbc_set_defaults</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sbc.o(i.sbc_set_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sbc_set_defaults
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_init
</UL>

<P><STRONG><a name="[261]"></a>sbc_synthesize_audio</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sbc.o(i.sbc_synthesize_audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sbc_synthesize_audio &rArr; sbc_synthesize_four
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_four
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_eight
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode
</UL>

<P><STRONG><a name="[265]"></a>sbc_synthesize_eight</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, sbc.o(i.sbc_synthesize_eight))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sbc_synthesize_eight
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_clip16
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_audio
</UL>

<P><STRONG><a name="[264]"></a>sbc_synthesize_four</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, sbc.o(i.sbc_synthesize_four))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sbc_synthesize_four
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_clip16
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_synthesize_audio
</UL>

<P><STRONG><a name="[a7]"></a>sbc_unpack_frame</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, sbc.o(i.sbc_unpack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sbc_unpack_frame &rArr; sbc_unpack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbc.o(i.sbc_set_defaults)
</UL>
<P><STRONG><a name="[22d]"></a>sbc_unpack_frame_internal</STRONG> (Thumb, 794 bytes, Stack size 216 bytes, sbc.o(i.sbc_unpack_frame_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sbc_unpack_frame_internal &rArr; sbc_calculate_bits &rArr; sbc_calculate_bits_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_crc8
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_calculate_bits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_unpack_frame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_unpack_frame
</UL>

<P><STRONG><a name="[19e]"></a>bt_memory_is_allocatable_packet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bt_memory.o(i.bt_memory_is_allocatable_packet))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_allocate_packet
</UL>

<P><STRONG><a name="[15b]"></a>add_item_to_array</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cjson.o(i.add_item_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_item_to_array
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[15d]"></a>add_item_to_object</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cjson.o(i.add_item_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[1d5]"></a>buffer_skip_whitespace</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[1ce]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
</UL>

<P><STRONG><a name="[15f]"></a>cJSON_strdup</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cjson.o(i.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_strdup
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
</UL>

<P><STRONG><a name="[1d9]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(i.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[15e]"></a>cast_away_const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cjson.o(i.cast_away_const))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1e9]"></a>ensure</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, cjson.o(i.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[230]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1d0]"></a>get_object_item</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[22e]"></a>parse_array</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[27d]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[22f]"></a>parse_number</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[233]"></a>parse_object</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[234]"></a>parse_string</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[1d6]"></a>parse_value</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[1d8]"></a>print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, cjson.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>

<P><STRONG><a name="[23d]"></a>print_array</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, cjson.o(i.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[23e]"></a>print_number</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, cjson.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[240]"></a>print_object</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, cjson.o(i.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[242]"></a>print_string</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(i.print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[241]"></a>print_string_ptr</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, cjson.o(i.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_string_ptr &rArr; ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[23b]"></a>print_value</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, cjson.o(i.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = print_value &rArr; print_number &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1d4]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(i.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[15c]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.suffix_object))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>

<P><STRONG><a name="[23c]"></a>update_offset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cjson.o(i.update_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[235]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[1db]"></a>check_fs</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f3]"></a>find_volume</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1eb]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f8]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1dd]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1de]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ee]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[1ed]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[1dc]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1f0]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[1ef]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[22b]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync_window &rArr; disk_write &rArr; hw_spi_flash_write &rArr; hw_spi_flash_write_nocheck &rArr; hw_spi_flash_write_page &rArr; hw_spi_flash_wait_idle &rArr; hw_spi_flash_read_reg &rArr; protocol_spi1_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[137]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[134]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[13a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[139]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[136]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b5]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[87]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
